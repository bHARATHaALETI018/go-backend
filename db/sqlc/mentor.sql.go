// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: mentor.sql

package db

import (
	"context"
	"database/sql"
)

const createMentor = `-- name: CreateMentor :one
INSERT INTO mentor(
    email,
    password,
    user_name,
    first_name,
    middle_name,
    last_name,
    phone,
    id_number
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, email, password, user_name, first_name, middle_name, last_name, phone, id_number, created_at, updated_at
`

type CreateMentorParams struct {
	Email      string         `json:"email"`
	Password   string         `json:"password"`
	UserName   string         `json:"user_name"`
	FirstName  string         `json:"first_name"`
	MiddleName sql.NullString `json:"middle_name"`
	LastName   string         `json:"last_name"`
	Phone      string         `json:"phone"`
	IDNumber   string         `json:"id_number"`
}

func (q *Queries) CreateMentor(ctx context.Context, arg CreateMentorParams) (Mentor, error) {
	row := q.db.QueryRowContext(ctx, createMentor,
		arg.Email,
		arg.Password,
		arg.UserName,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Phone,
		arg.IDNumber,
	)
	var i Mentor
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Phone,
		&i.IDNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMentor = `-- name: DeleteMentor :one
DELETE FROM mentor WHERE id_number = $1
RETURNING id, email, password, user_name, first_name, middle_name, last_name, phone, id_number, created_at, updated_at
`

func (q *Queries) DeleteMentor(ctx context.Context, idNumber string) (Mentor, error) {
	row := q.db.QueryRowContext(ctx, deleteMentor, idNumber)
	var i Mentor
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Phone,
		&i.IDNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMentor = `-- name: GetMentor :one
SELECT id, email, password, user_name, first_name, middle_name, last_name, phone, id_number, created_at, updated_at FROM mentor
WHERE id_number = $1 LIMIT 1
`

func (q *Queries) GetMentor(ctx context.Context, idNumber string) (Mentor, error) {
	row := q.db.QueryRowContext(ctx, getMentor, idNumber)
	var i Mentor
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Phone,
		&i.IDNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMentors = `-- name: ListMentors :many
SELECT id, email, password, user_name, first_name, middle_name, last_name, phone, id_number, created_at, updated_at FROM mentor
ORDER BY id_number
LIMIT $1
OFFSET $2
`

type ListMentorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMentors(ctx context.Context, arg ListMentorsParams) ([]Mentor, error) {
	rows, err := q.db.QueryContext(ctx, listMentors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mentor
	for rows.Next() {
		var i Mentor
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.UserName,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Phone,
			&i.IDNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMentorMiddleName = `-- name: UpdateMentorMiddleName :one
UPDATE mentor SET middle_name = $2
WHERE id_number = $1
RETURNING id, email, password, user_name, first_name, middle_name, last_name, phone, id_number, created_at, updated_at
`

type UpdateMentorMiddleNameParams struct {
	IDNumber   string         `json:"id_number"`
	MiddleName sql.NullString `json:"middle_name"`
}

func (q *Queries) UpdateMentorMiddleName(ctx context.Context, arg UpdateMentorMiddleNameParams) (Mentor, error) {
	row := q.db.QueryRowContext(ctx, updateMentorMiddleName, arg.IDNumber, arg.MiddleName)
	var i Mentor
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Phone,
		&i.IDNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMentorPhone = `-- name: UpdateMentorPhone :one
UPDATE mentor SET phone = $2
WHERE id_number = $1
RETURNING id, email, password, user_name, first_name, middle_name, last_name, phone, id_number, created_at, updated_at
`

type UpdateMentorPhoneParams struct {
	IDNumber string `json:"id_number"`
	Phone    string `json:"phone"`
}

func (q *Queries) UpdateMentorPhone(ctx context.Context, arg UpdateMentorPhoneParams) (Mentor, error) {
	row := q.db.QueryRowContext(ctx, updateMentorPhone, arg.IDNumber, arg.Phone)
	var i Mentor
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Phone,
		&i.IDNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
