// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: student.sql

package db

import (
	"context"
	"database/sql"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO student(
    email,
    password,
    user_name,
    first_name,
    last_name,
    roll_number,
    stream,
    section,
    course,
    phone,
    mentor
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11 
)
RETURNING id, email, password, user_name, first_name, last_name, roll_number, stream, section, course, phone, mentor, created_at, updated_at
`

type CreateStudentParams struct {
	Email      string        `json:"email"`
	Password   string        `json:"password"`
	UserName   string        `json:"user_name"`
	FirstName  string        `json:"first_name"`
	LastName   string        `json:"last_name"`
	RollNumber string        `json:"roll_number"`
	Stream     string        `json:"stream"`
	Section    string        `json:"section"`
	Course     string        `json:"course"`
	Phone      string        `json:"phone"`
	Mentor     sql.NullInt64 `json:"mentor"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.Email,
		arg.Password,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.RollNumber,
		arg.Stream,
		arg.Section,
		arg.Course,
		arg.Phone,
		arg.Mentor,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.RollNumber,
		&i.Stream,
		&i.Section,
		&i.Course,
		&i.Phone,
		&i.Mentor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :one
DELETE FROM student WHERE roll_number = $1
RETURNING id, email, password, user_name, first_name, last_name, roll_number, stream, section, course, phone, mentor, created_at, updated_at
`

func (q *Queries) DeleteStudent(ctx context.Context, rollNumber string) (Student, error) {
	row := q.db.QueryRowContext(ctx, deleteStudent, rollNumber)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.RollNumber,
		&i.Stream,
		&i.Section,
		&i.Course,
		&i.Phone,
		&i.Mentor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStudent = `-- name: GetStudent :one
SELECT id, email, password, user_name, first_name, last_name, roll_number, stream, section, course, phone, mentor, created_at, updated_at FROM student
WHERE roll_number = $1 LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, rollNumber string) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, rollNumber)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.RollNumber,
		&i.Stream,
		&i.Section,
		&i.Course,
		&i.Phone,
		&i.Mentor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT id, email, password, user_name, first_name, last_name, roll_number, stream, section, course, phone, mentor, created_at, updated_at FROM student
ORDER BY roll_number
LIMIT $1
OFFSET $2
`

type ListStudentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStudents(ctx context.Context, arg ListStudentsParams) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.UserName,
			&i.FirstName,
			&i.LastName,
			&i.RollNumber,
			&i.Stream,
			&i.Section,
			&i.Course,
			&i.Phone,
			&i.Mentor,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentCourse = `-- name: UpdateStudentCourse :one
UPDATE student SET course = $2, updated_at = now()
WHERE roll_number = $1
RETURNING id, email, password, user_name, first_name, last_name, roll_number, stream, section, course, phone, mentor, created_at, updated_at
`

type UpdateStudentCourseParams struct {
	RollNumber string `json:"roll_number"`
	Course     string `json:"course"`
}

func (q *Queries) UpdateStudentCourse(ctx context.Context, arg UpdateStudentCourseParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudentCourse, arg.RollNumber, arg.Course)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.RollNumber,
		&i.Stream,
		&i.Section,
		&i.Course,
		&i.Phone,
		&i.Mentor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStudentMentor = `-- name: UpdateStudentMentor :one
UPDATE student SET mentor = $2, updated_at = now()
WHERE roll_number = $1
RETURNING id, email, password, user_name, first_name, last_name, roll_number, stream, section, course, phone, mentor, created_at, updated_at
`

type UpdateStudentMentorParams struct {
	RollNumber string        `json:"roll_number"`
	Mentor     sql.NullInt64 `json:"mentor"`
}

func (q *Queries) UpdateStudentMentor(ctx context.Context, arg UpdateStudentMentorParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudentMentor, arg.RollNumber, arg.Mentor)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.RollNumber,
		&i.Stream,
		&i.Section,
		&i.Course,
		&i.Phone,
		&i.Mentor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStudentPhone = `-- name: UpdateStudentPhone :one
UPDATE student SET phone = $2, updated_at = now()
WHERE id = $1
RETURNING id, email, password, user_name, first_name, last_name, roll_number, stream, section, course, phone, mentor, created_at, updated_at
`

type UpdateStudentPhoneParams struct {
	ID    int64  `json:"id"`
	Phone string `json:"phone"`
}

func (q *Queries) UpdateStudentPhone(ctx context.Context, arg UpdateStudentPhoneParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudentPhone, arg.ID, arg.Phone)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.RollNumber,
		&i.Stream,
		&i.Section,
		&i.Course,
		&i.Phone,
		&i.Mentor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStudentSection = `-- name: UpdateStudentSection :one
UPDATE student SET section = $2, updated_at = now()
WHERE roll_number = $1
RETURNING id, email, password, user_name, first_name, last_name, roll_number, stream, section, course, phone, mentor, created_at, updated_at
`

type UpdateStudentSectionParams struct {
	RollNumber string `json:"roll_number"`
	Section    string `json:"section"`
}

func (q *Queries) UpdateStudentSection(ctx context.Context, arg UpdateStudentSectionParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudentSection, arg.RollNumber, arg.Section)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.RollNumber,
		&i.Stream,
		&i.Section,
		&i.Course,
		&i.Phone,
		&i.Mentor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStudentStream = `-- name: UpdateStudentStream :one
UPDATE student SET stream = $2, updated_at = now()
WHERE roll_number = $1
RETURNING id, email, password, user_name, first_name, last_name, roll_number, stream, section, course, phone, mentor, created_at, updated_at
`

type UpdateStudentStreamParams struct {
	RollNumber string `json:"roll_number"`
	Stream     string `json:"stream"`
}

func (q *Queries) UpdateStudentStream(ctx context.Context, arg UpdateStudentStreamParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudentStream, arg.RollNumber, arg.Stream)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.RollNumber,
		&i.Stream,
		&i.Section,
		&i.Course,
		&i.Phone,
		&i.Mentor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
